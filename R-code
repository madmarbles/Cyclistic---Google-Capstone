## Install necessary packages

library(tidyverse)
library(janitor)
library(lubridate)

## Open necessary files

q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

## Compare column names
colnames(q1_2019)
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2020)

## Rename inconsistent column names
(q2_2019 <- rename(q2_2019,
                   ride_id = "V1",
                   rideable_type = "V4",
                   started_at = "V2",
                   ended_at = "V3",
                   start_station_name = "V7",
                   start_station_id = "V6",
                   end_station_name = "V9",
                   end_station_id = "V8",
                   member_casual = "V10"))

## Remove previous header row
df_q2_2019 <- q2_2019[-c(1), ]

(q3_2019 <- rename(q3_2019,
                   ride_id = "trip_id",
                   rideable_type = "bikeid",
                   started_at = "start_time",
                   ended_at = "end_time",
                   start_station_name = "from_station_name",
                   start_station_id = "from_station_id",
                   end_station_name = "to_station_name",
                   end_station_id = "to_station_id",
                   member_casual = "usertype"))

(q4_2019 <- rename(q4_2019,
                   ride_id = "trip_id",
                   rideable_type = "bikeid",
                   started_at = "start_time",
                   ended_at = "end_time",
                   start_station_name = "from_station_name",
                   start_station_id = "from_station_id",
                   end_station_name = "to_station_name",
                   end_station_id = "to_station_id",
                   member_casual = "usertype"))

## Inspect and check for inconsistencies
str(q1_2019)
str(q2_2019)
str(q3_2019)
str(q4_2019)

## Aggregate columns with similar data
q1_2019 <- mutate(q1_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type),
                  start_station_id = as.character(start_station_id),
                  end_station_id = as.character(end_station_id))
df_q2_2019 <- mutate(df_q2_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type),
                  start_station_id = as.character(start_station_id),
                  end_station_id = as.character(end_station_id))
q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type),
                  start_station_id = as.character(start_station_id),
                  end_station_id = as.character(end_station_id))
q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type),
                  start_station_id = as.character(start_station_id),
                  end_station_id = as.character(end_station_id))

## Combine all data frames
all_trips <- bind_rows(q1_2019,df_q2_2019,q3_2019,q4_2019)

## Remove irrelevant columns
all_trips <- all_trips%>%
  select(-c(V5, V11, V12, tripduration, birthyear, gender))

## Inspect the new table 
colnames(all_trips)
nrow(all_trips)
dim(all_trips)
head(all_trips)
tail(all_trips)
str(all_trips)
summary(all_trips)

## Clean data

## Consolidate the "member_casual" column
table(all_trips$member_casual)
all_trips <- all_trips%>%
  mutate(member_casual = recode(member_casual, "Subscriber"="member",
                                "Customer"="casual"))

## Add columns that lists different date formats
all_trips$date <- as.Date(all_trips$started_at)
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

## Add a calculated field "ride_length" to get the trip duration for the entire dataframe and covert for calculations
all_trips$ride_length <- difftime(all_trips$ended_at, all_trips$started_at)
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

##  Remove bad data
all_trips_v2 <- all_trips[!(all_trips$start_station_name=="HQ QR" | all_trips$ride_length<0),]

## Change months to names
all_trips_v2 <- all_trips_v2 %>%
  mutate(month = case_when(
    month == "01"  ~ "January",
    month == "02"  ~ "February",
    month == "03"  ~ "March",
    month == "04"  ~ "April",
    month == "05"  ~ "May",
    month == "06"  ~ "June",
    month == "07"  ~ "July",
    month == "08"  ~ "August",
    month == "09"  ~ "September",
    month == "10" ~ "October",
    month == "11" ~ "November",
    month == "12" ~ "December"))

##  Comparison to original dataset
nrow(all_trips_v2)
table(all_trips_v2$member_casual)

## Compute percentages of members and casual riders
1117054/4561085
3444031/4561085

##Charts

## Create Chart of quantity by weekday
all_trips_v2 %>%
  group_by(day_of_week, member_casual) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = day_of_week, y = count, fill = member_casual)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of Riders by Day of Week",
       x = "Day of Week",
       y = "Count") +
  theme_minimal()

## Create Chart for duration
all_trips_v2 %>%
  group_by(day_of_week, member_casual) %>%
  summarise(average_ride_length = mean(ride_length, na.rm = TRUE)) %>%
  ggplot(aes(x = day_of_week, y = average_ride_length, fill = member_casual)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  labs(title = "Average Ride Length by Day of Week and Member Type",
       x = "Day of Week",
       y = "Average Ride Length") +
  theme_minimal()

## Create Chart for quantity by month
all_trips_v2 %>%
  group_by(month, member_casual) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = month, y = count, fill = member_casual)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of Riders by Month",
       x = "Month",
       y = "Count") +
  theme_minimal()
